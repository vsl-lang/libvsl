const STRING_DEALLOC_OPT_OUT: UInt8 = 1 << 0;

private func strlen(string: Pointer<UInt8>) -> UInt external(strlen);
private func memcmp(stringA: Pointer<UInt8>, stringB: Pointer<UInt8>, length: UInt64) -> UInt external(memcmp);

// A string represents some section of text. A string can represent a single
// character or an entire file. That said, it is important to understand when
// to use strings compared to other types. If you were to read a large file into
// a string you would eat ungodly amounts of memory so for this purpose you may
// want to reference the File class.
//
// VSL strings are **immutable**. This means that you can't really 'modify' a
// string, you must create a new one. This is automatically done with string
// methods and operators such as `+`.
//
// A good question is what happens with these old strings. VSL, unlike many
// other compiled languages, uses automatic memory management. This means that
// VSL will intelligently determine when to clean up old strings. That said,
// automatic memory management is not magic and it is reccomended not to
// construct strings in large loops. For this purpose use the string methods
// which have internal optimizations.
//
// Internally strings are represented as their length and their value as a null-
// terminated UInt8 array. You can access these underlying methods using
// self.underlyingData and self.internalLength however this is reccomended against
// as in other implementations for other platforms these may not be available.
// Additionally use caution when using these, modifying any of these values can
// result in segfaults. If you are passing the underlyingData to a function
// which may modify it, create a copy of the underlyingData before you use it.
@primitive(String, _precType)
@dynamic(false)
public class String {

    // NOTE: Positioning of first couple fields is very important. Usually
    // this will be compiled as if it is in the format of
    //     struct libvsl.String {
    //         uint8_t options;
    //         size_t length;
    //         char* value;
    //     }
    // if you change these then you won't get a sane string.

    private const options: UInt8 = 0

    // The internal byteLength is always one byte shorter than the underlyingData
    // as it does not include the terminating null byte
    private const internalLength: UInt

    // The underlyingData is expected to be immutable and ends in a null byte.
    // That said it may contain a null byte in the actual string itself.
    const underlyingData: Pointer<UInt8>

    /// Returns the amount of characters in the string. This will be the same as
    /// [String#byteLength] _unless_ the unicode flag of the string is enabled.
    /// Getting this is still always an O(1) operation as the character tally
    /// is still always tracked.
    public let length: Int {
        return Int::self.internalLength
    }

    /// Returns the amount of bytes in the byte representation of the string.
    /// See also [String#toBytes()]
    public let byteLength: Int {
        return Int::self.internalLength
    }

    /// Returns the string as a byte pointer. This creates a copy that must be
    /// manually [Pointer#free]'d. This will have null-byte at the end and will
    /// be of length [String#byteLength]
    public func toBytes() -> Pointer<UInt8> {
        const newPtr = Pointer<UInt8>.alloc(count: UInt64::self.internalLength)
        self.underlyingData.copy(to: newPtr, count: UInt64::self.internalLength + 1)
        return newPtr
    }

    /// Using this intializer REQUIRES a Pointer that is allocated by VSL. As a
    /// result this class WILL take control of the management for the data. To
    /// prevent this you will need to set the STRING_DEALLOC_OPT_OUT bit which
    /// can be done using the [String#deallocOptOut] function.
    public init(value: Pointer<UInt8>, byteLength: UInt) {
        self.underlyingData = value
        self.internalLength = byteLength
    }

    /// Using this intializer REQUIRES a Pointer that is allocated by VSL. As a
    /// result this class WILL take control of the management for the data. To
    /// prevent this you will need to set the STRING_DEALLOC_OPT_OUT bit which
    /// can be done using the [String#deallocOptOut()] function.
    ///
    /// This will calculate the string length of `value` until the first
    /// null-byte encountered.
    public init(value: Pointer<UInt8>) {
        self.underlyingData = value
        self.internalLength = strlen(string: value)
    }

    /// Using this intializer REQUIRES a Pointer that is allocated by VSL. As a
    /// result this class WILL take control of the management for the data. To
    /// prevent this you will need to set the STRING_DEALLOC_OPT_OUT bit which
    /// can be done using the [String#deallocOptOut] function.
    public init(value: ByteSequence, byteLength: UInt) {
        self.underlyingData = Pointer<UInt8>::value
        self.internalLength = byteLength
    }

    /// Using this intializer REQUIRES a Pointer that is allocated by VSL. As a
    /// result this class WILL take control of the management for the data. To
    /// prevent this you will need to set the STRING_DEALLOC_OPT_OUT bit which
    /// can be done using the [String#deallocOptOut()] function.
    ///
    /// This will calculate the string length of `value` until the first
    /// null-byte encountered.
    public init(value: ByteSequence) {
        self.underlyingData = Pointer<UInt8>::value
        self.internalLength = strlen(string: Pointer<UInt8>::value)
    }

    /// Creates from a pointer that is not allocated by VSL. This is the same
    /// as the other initializers except it already sets the
    /// STRING_DEALLOC_OPT_OUT bit.
    public init(externalValue value: Pointer<UInt8>, byteLength: UInt) {
        self.options |= STRING_DEALLOC_OPT_OUT;
        self.underlyingData = value
        self.internalLength = byteLength
    }

    /// Creates from a pointer that is not allocated by VSL. This is the same
    /// as the other initializers except it already sets the
    /// STRING_DEALLOC_OPT_OUT bit. This also automatically calculates the string
    /// length using the `strlen` function,
    public init(externalValue value: Pointer<UInt8>) {
        self.options |= STRING_DEALLOC_OPT_OUT;
        self.underlyingData = value
        self.internalLength = strlen(string: value)
    }

    /// Creates from a pointer that is not allocated by VSL. This is the same
    /// as the other initializers except it already sets the
    /// STRING_DEALLOC_OPT_OUT bit.
    public init(externalValue value: ByteSequence, byteLength: UInt) {
        self.options |= STRING_DEALLOC_OPT_OUT;
        self.underlyingData = Pointer<UInt8>::value
        self.internalLength = byteLength
    }

    /// Creates from a pointer that is not allocated by VSL. This is the same
    /// as the other initializers except it already sets the
    /// STRING_DEALLOC_OPT_OUT bit. This also automatically calculates the string
    /// length using the `strlen` function,
    public init(externalValue value: ByteSequence) {
        self.options |= STRING_DEALLOC_OPT_OUT;
        self.underlyingData = Pointer<UInt8>::value
        self.internalLength = strlen(string: Pointer<UInt8>::value)
    }


    /// Appends to the internal string buffer. Use of this is very much
    /// discouraged since strings should otherwise be immutable. There are very
    /// limited use cases for this and this likely would have unintended side
    /// effects.
    public func append(string: String) {
        // Create new string block that is long enough
        const newDataLength: UInt64 = UInt64::self.internalLength + UInt64::string.internalLength + 1
        self.underlyingData = self.underlyingData.realloc(count: newDataLength)

        // Store new string
        self.underlyingData.offset(by: Int64::self.internalLength).copy(from: string.underlyingData)
        self.underlyingData.offset(by: Int64::newDataLength).store(value: 0x00)
    }

    /// Creates a substring from a string. This slices a string 0-indexed from
    /// [start, end). Negative parameters refer to the end of the array. This
    /// means `-1` will refer to just before the last item.
    public func substring(from startIndex: Int, to endIndex: Int) -> String {
        if startIndex > Int::self.internalLength {
            return ""
        }

        let normalizedStartIndex = startIndex < 0 ? Int::self.internalLength + startIndex : startIndex
        let normalizedEndIndex = endIndex < 0 ? Int::self.internalLength + endIndex : endIndex

        if normalizedEndIndex <= normalizedStartIndex {
            return ""
        }

        let newLength = min(normalizedEndIndex - normalizedStartIndex, Int::self.internalLength)
        let newPtr = Pointer<UInt8>.alloc(UInt64::newLength)

        self.underlyingData
            .offset(by: Int64::normalizedStartIndex)
            .copy(to: newPtr, count: UInt64::newLength)

        return String(value: newPtr, byteLength: UInt::newLength)
    }

    /// Substrings from a given point to the end of the string. A negative number
    /// as a parameter is invalid. Use `String.tail` if you wish for that. If a
    /// number zero or less is passed an empty string will be returned.
    /// Alternatively if the given point is past the index at the end of the
    /// string, an empty string will be returned.
    public func substring(from index: Int) -> String {
        if index < 0 || index >= Int::self.internalLength {
            return ""
        }

        return self.substring(from: index, to: Int::self.internalLength)
    }

    /// Obtains the first n characters from a string. This is identical to
    /// calling [String#substring(from:to:)] with `from: 0`.
    public func head(to index: Int) -> String {
        return self.substring(from: 0, to: index)
    }

    /// Obtains the last n characters from a string.
    public func tail(to index: Int) -> String {
        return self.substring(from: -index, to: Int::self.internalLength)
    }

    /// Searches current string for the index of a substring. This returns -1
    /// if the index was not found.
    // public func findIndex(of substring: String) -> Int {
    //     // The substring can't be bigger than this string and have it exist.
    //     if substring.byteLength > self.internalLength { return -1 }
    // }

    /// Prevents the backing pointer from being deallocated by VSL. Use this if
    /// you get the value from an external source
    public func deallocOptOut() {
        self.options |= STRING_DEALLOC_OPT_OUT;
    }

    deinit {
        if self.options & STRING_DEALLOC_OPT_OUT == 0 {
            self.underlyingData.free()
        }
    }

    /// Check if two string are exactly equal
    public static func ==(lhs: String, rhs: String) -> Bool {
        if lhs.byteLength != rhs.byteLength { return false }
        return memcmp(lhs.underlyingData, rhs.underlyingData, UInt64::lhs.byteLength) == 0
    }

    // Allocation states:
    // @uncaptured lhs
    // @uncaptured rhs
    // -> @uncaptured
    /// Concatenate two strings together.
    public static func +(lhs: String, rhs: String) -> String {
        let newLength: UInt = lhs.internalLength + rhs.internalLength

        // Allocation states:
        // @alloc(unmanaged)
        let newPtr = Pointer<UInt8>.alloc(count: UInt64::(newLength + 1));

        // Copy the current string to a new location
        newPtr.copy(from: ByteSequence::lhs.underlyingData, length: UInt64::lhs.internalLength)

        // Copy the second string
        newPtr
            .offset(by: Int64::lhs.internalLength)
            .copy(from: ByteSequence::rhs.underlyingData, length: UInt64::rhs.internalLength)

        newPtr
            .offset(by: Int64::newLength)
            .store(value: 0)

        // Allocation states:
        // @alloc(unmanaged)
        let newString = String(value: newPtr, byteLength: lhs.internalLength + rhs.internalLength)
        return newString
    }
}
