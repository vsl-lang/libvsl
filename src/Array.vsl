const ARRAY_DEALLOC_OPT_OUT: UInt8 = 1 << 0;

// The array class represents a dynamically-scaled mutable list of items.
@dynamic(false)
@primitive(List)
public class Array<Type> {

    // Array options
    private let options: UInt8 = 0

    // Length of the physical content. This should always be less than or equal
    // to capacity otherwise something has gone very wrong.
    private let contentLength: UInt

    // Pointer to  the data
    private let data: Pointer<Type>

    // Internal capacity of the array
    private let capacity: UInt

    /// Gets the length of the array
    public let length: Int {
        return Int::self.contentLength
    }

    /// Create an empty array with a given internal capacity. You can use
    public init(initialCapacity: UInt = 4) {
        self.capacity = initialCapacity
        self.contentLength = 0
        self.data = Pointer<Type>.alloc(count: UInt64::initialCapacity)
    }

    /// Create an array from a C-style array/pointer with a given length, if
    /// the length of pointer is invalid behavior is undefined. Deallocation is
    /// opted out by default with this.
    public init(cArray: Pointer<Type>, length: UInt) {
        self.capacity = length
        self.contentLength = length
        self.data = cArray

        self.options |= ARRAY_DEALLOC_OPT_OUT
    }

    /// Appends an element to the end of the array
    public func append(element: Type) -> Void {
        if self.contentLength == self.capacity {
            self.reallocateArray()
        }

        self.data
            .offset(by: Int64::self.contentLength)
            .store(value: element)

        self.contentLength += 1
    }

    /// Prepends an element to the beginning of the array
    public func prepend(element: Type) -> Void {
        if self.contentLength == self.capacity {
            self.reallocateArray()
        }

        self.data
            .move(to: self.data.offset(by: 1), count: UInt64::self.contentLength)

        self.data.store(value: element)
        self.contentLength += 1
    }

    /// Subscript access for index. Indexes start at zero to [Array#length] - 1.
    /// Negative indexes start indexing from the back of the array. This will
    /// panic if an invalid index is attempted to be indexed. To access as an
    /// optional you can use [Array#get].
    public subscript(index: Int) -> Type {
        let physicalIndex = Int64::self.convertToPhysicalIndex(index)

        assert(physicalIndex >= 0 && physicalIndex < Int64::self.length, "Attempted to access array at position for which it has no value.")
        return self.data.offset(by: physicalIndex).dereference()
    }

    /// Subscript access which returns a subarray. This is [A, B). So calling
    /// this as `sliceFrom: 1, to: 1` would return an empty array. If the end
    /// index is less than or equal to the start index no value will be returned.
    /// Negaative values will be handled like in a normal subscript. If the
    /// second is past the end of the array it will merely return as many items
    /// as possible
    public subscript(sliceFrom startIndex: Int, to endIndex: Int) -> Array<Type> {
        const physicalStartIndex = Int64::self.convertToPhysicalIndex(startIndex)
        const physicalEndIndex = Int64::self.convertToPhysicalIndex(endIndex)

        if physicalEndIndex <= physicalStartIndex {
            return Array<Type>()
        }

        const netLength = min(
            UInt::(physicalEndIndex - physicalStartIndex),
            self.contentLength
        )

        const newArray = Array<Type>(initialCapacity: netLength)
        newArray.contentLength = netLength

        // copy from current array to new array
        self.data.offset(by: physicalStartIndex)
            .copy(to: newArray.data, UInt64::netLength)

        return newArray
    }

    // Subscript access which returns a subarray using a length and start
    // index. Negative index values are supported but a negative or zero length
    // will return an empty array.
    public subscript(sliceFrom startIndex: Int, count: Int) -> Array<Type> {
        const physicalStartIndex = self.convertToPhysicalIndex(startIndex)

        return self[sliceFrom: physicalStartIndex, to: physicalStartIndex + count]
    }

    // Normalize negative values
    @inline
    private func convertToPhysicalIndex(index: Int) -> Int {
        if index < 0 {
            return self.length + index
        } else {
            return index
        }
    }

    // Expand array capacity
    private func reallocateArray() -> Void {
        self.capacity *= 2

        // If ARRAY_DEALLOC_OPT_OUT is true then we will have to create a new
        // pointer
        if self.options & ARRAY_DEALLOC_OPT_OUT != 0 {
            self.data = Pointer<Type>.alloc(count: UInt64::self.capacity)
            self.options ^= ARRAY_DEALLOC_OPT_OUT;
        } else {
            self.data = self.data.realloc(count: UInt64::self.capacity)
        }
    }

    deinit {
        if self.options & ARRAY_DEALLOC_OPT_OUT == 0 {
            self.data.free()
        }
    }
}
