// Represents a 64-bit unsigned integer.
@primitive(Integer) @mock(ui64) public class UInt64 {

    private init() {}

    @backend(llvm)
    @inline(always)
    public static func +(lhs: UInt64, rhs: UInt64) -> UInt64 native(iadd)

    @backend(llvm)
    @inline(always)
    public static func -(lhs: UInt64, rhs: UInt64) -> UInt64 native(isub)

    @backend(llvm)
    @inline(always)
    public static func *(lhs: UInt64, rhs: UInt64) -> UInt64 native(imul)

    @backend(llvm)
    @inline(always)
    public static func /(lhs: UInt64, rhs: UInt64) -> Double native(uidiv)

    @backend(llvm)
    @inline(always)
    public static func \(lhs: UInt64, rhs: UInt64) -> UInt64 native(udiv)

    @backend(llvm)
    @inline(always)
    public static func %(lhs: UInt64, rhs: UInt64) -> UInt64 native(uirem)

    @backend(llvm)
    @inline(always)
    public static func &(lhs: UInt64, rhs: UInt64) -> UInt64 native(and);

    @backend(llvm)
    @inline(always)
    public static func |(lhs: UInt64, rhs: UInt64) -> UInt64 native(or);

    @backend(llvm)
    @inline(always)
    public static func ^(lhs: UInt64, rhs: UInt64) -> UInt64 native(xor);

    @backend(llvm)
    @inline(always)
    public static func ==(lhs: UInt64, rhs: UInt64) -> Bool native(ieq)

    @backend(llvm)
    @inline(always)
    public static func !=(lhs: UInt64, rhs: UInt64) -> Bool native(ineq)

    @backend(llvm)
    @inline(always)
    public static func >=(lhs: UInt64, rhs: UInt64) -> Bool native(uigte)

    @backend(llvm)
    @inline(always)
    public static func <=(lhs: UInt64, rhs: UInt64) -> Bool native(uilte)

    @backend(llvm)
    @inline(always)
    public static func >(lhs: UInt64, rhs: UInt64) -> Bool native(uigt)

    @backend(llvm)
    @inline(always)
    public static func <(lhs: UInt64, rhs: UInt64) -> Bool native(uilt)

    @backend(llvm)
    @inline(always)
    public static func <<(lhs: UInt64, rhs: UInt64) -> UInt64 native(shl);

    @backend(llvm)
    @inline(always)
    public static func >>(lhs: UInt64, rhs: UInt64) -> UInt64 native(ashr);

    @backend(llvm)
    @inline(always)
    public static func >>>(lhs: UInt64, rhs: UInt64) -> UInt64 native(lshr);

    @backend(llvm)
    @inline(always)
    public static func ~(expression: UInt64) -> UInt64 native(inot)

    @backend(llvm)
    @inline(always)
    public static func -(expression: UInt64) -> UInt64 native(ineg)

    /// Converts to string
    func toString(base: Int = 10) -> String {
        assert(base > 0, "UInt64#toString(base:): base must be positive")
        assert(base <= 26, "UInt64#toString(base:): base must be at most 26")

        if self == 0 { return "0" }

        let content = Array<UInt8>(initialCapacity: 4)
        content.deallocOptOut()

        let n: UInt64 = self

        // This operates from right to left (in reverse).
        do {
            let digit = n % UInt64::base

            if digit < 0x0A {
                // 48 is char code for '0'
                content.append(value: 48 + UInt8::digit)
            } else {
                // 65 is char code for 'A'
                content.append(value: 65 + UInt8::digit - 0x0A)
            }
        } while (n \= UInt64::base) != 0

        // Because string is constructed backwards we must reverse it
        content.reverse()
        content.append(0x00) // Add terminating null byte

        const returnValue = String(value: content.internalDataBuffer, byteLength: UInt::content.length)
        return returnValue
    }

    /// Generates random number in range [from, to)
    public static func random(from start: UInt64, to end: UInt64) -> UInt64 {
        assert(end > start, "Random end must be greater than start")
        return getRandomInt() % (end - start) + start
    }

    /// Smallest possible
    public static const minValue: UInt64 = 0

    /// Largest possible
    public static const maxValue: UInt64 = ~0
}
