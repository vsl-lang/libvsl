// Represents a 64-bit unsigned integer.
@primitive(Integer) @mock(ui64) public class UInt64 {

    @backend(llvm)
    @inline(always)
    public static func +(lhs: UInt64, rhs: UInt64) -> UInt64 native(iadd)

    @backend(llvm)
    @inline(always)
    public static func -(lhs: UInt64, rhs: UInt64) -> UInt64 native(isub)

    @backend(llvm)
    @inline(always)
    public static func *(lhs: UInt64, rhs: UInt64) -> UInt64 native(imul)

    @backend(llvm)
    @inline(always)
    public static func /(lhs: UInt64, rhs: UInt64) -> Double native(uidiv)

    @backend(llvm)
    @inline(always)
    public static func \(lhs: UInt64, rhs: UInt64) -> UInt64 native(udiv)

    @backend(llvm)
    @inline(always)
    public static func %(lhs: UInt64, rhs: UInt64) -> UInt64 native(uirem)

    @backend(llvm)
    @inline(always)
    public static func &(lhs: UInt64, rhs: UInt64) -> UInt64 native(and);

    @backend(llvm)
    @inline(always)
    public static func |(lhs: UInt64, rhs: UInt64) -> UInt64 native(or);

    @backend(llvm)
    @inline(always)
    public static func ^(lhs: UInt64, rhs: UInt64) -> UInt64 native(xor);

    @backend(llvm)
    @inline(always)
    public static func ==(lhs: UInt64, rhs: UInt64) -> Bool native(ieq)

    @backend(llvm)
    @inline(always)
    public static func !=(lhs: UInt64, rhs: UInt64) -> Bool native(ineq)

    @backend(llvm)
    @inline(always)
    public static func >=(lhs: UInt64, rhs: UInt64) -> Bool native(uigte)

    @backend(llvm)
    @inline(always)
    public static func <=(lhs: UInt64, rhs: UInt64) -> Bool native(uilte)

    @backend(llvm)
    @inline(always)
    public static func >(lhs: UInt64, rhs: UInt64) -> Bool native(uigt)

    @backend(llvm)
    @inline(always)
    public static func <(lhs: UInt64, rhs: UInt64) -> Bool native(uilt)

    @backend(llvm)
    @inline(always)
    public static func <<(lhs: UInt64, rhs: UInt64) -> UInt64 native(shl);

    @backend(llvm)
    @inline(always)
    public static func >>(lhs: UInt64, rhs: UInt64) -> UInt64 native(ashr);

    @backend(llvm)
    @inline(always)
    public static func >>>(lhs: UInt64, rhs: UInt64) -> UInt64 native(lshr);

    @backend(llvm)
    @inline(always)
    public static func ~(expression: UInt64) -> UInt64 native(inot)

    @backend(llvm)
    @inline(always)
    public static func -(expression: UInt64) -> UInt64 native(ineg)

    /// Generates random number in range [from, to)
    public static func random(from start: UInt64, to end: UInt64) -> UInt64 {
        assert(end > start, "Random end must be greater than start")
        return getRandomInt() % (end - start) + start
    }
}
