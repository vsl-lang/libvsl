// Represents an 8-bit unsigned integer. This is equivilent to a 'char' or
// 'byte' type in terms of the amount of memory it refers to.
@primitive(Integer) @mock(ui8) public class UInt8 {

    @backend(llvm)
    @inline(always)
    public static func +(lhs: UInt8, rhs: UInt8) -> UInt8 native(iadd)

    @backend(llvm)
    @inline(always)
    public static func -(lhs: UInt8, rhs: UInt8) -> UInt8 native(isub)

    @backend(llvm)
    @inline(always)
    public static func *(lhs: UInt8, rhs: UInt8) -> UInt8 native(imul)

    @backend(llvm)
    @inline(always)
    public static func /(lhs: UInt8, rhs: UInt8) -> Double native(uidiv)

    @backend(llvm)
    @inline(always)
    public static func \(lhs: UInt8, rhs: UInt8) -> UInt8 native(udiv)

    @backend(llvm)
    @inline(always)
    public static func %(lhs: UInt8, rhs: UInt8) -> UInt8 native(uirem)

    @backend(llvm)
    @inline(always)
    public static func &(lhs: UInt8, rhs: UInt8) -> UInt8 native(and);

    @backend(llvm)
    @inline(always)
    public static func |(lhs: UInt8, rhs: UInt8) -> UInt8 native(or);

    @backend(llvm)
    @inline(always)
    public static func ^(lhs: UInt8, rhs: UInt8) -> UInt8 native(xor);

    @backend(llvm)
    @inline(always)
    public static func ==(lhs: UInt8, rhs: UInt8) -> Bool native(ieq)

    @backend(llvm)
    @inline(always)
    public static func !=(lhs: UInt8, rhs: UInt8) -> Bool native(ineq)

    @backend(llvm)
    @inline(always)
    public static func >=(lhs: UInt8, rhs: UInt8) -> Bool native(uigte)

    @backend(llvm)
    @inline(always)
    public static func <=(lhs: UInt8, rhs: UInt8) -> Bool native(uilte)

    @backend(llvm)
    @inline(always)
    public static func >(lhs: UInt8, rhs: UInt8) -> Bool native(uigt)

    @backend(llvm)
    @inline(always)
    public static func <(lhs: UInt8, rhs: UInt8) -> Bool native(uilt)

    @backend(llvm)
    @inline(always)
    public static func <<(lhs: UInt8, rhs: UInt8) -> UInt8 native(shl);

    @backend(llvm)
    @inline(always)
    public static func >>(lhs: UInt8, rhs: UInt8) -> UInt8 native(ashr);

    @backend(llvm)
    @inline(always)
    public static func >>>(lhs: UInt8, rhs: UInt8) -> UInt8 native(lshr);

    @backend(llvm)
    @inline(always)
    public static func ~(expression: UInt8) -> UInt8 native(inot)

    @backend(llvm)
    @inline(always)
    public static func -(expression: UInt8) -> UInt8 native(ineg)
}
