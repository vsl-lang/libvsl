// Represents an 8-bit unsigned integer. This is equivilent to a 'char' or
// 'byte' type in terms of the amount of memory it refers to.
@primitive(Integer) @mock(ui8) public class UInt8 {

    @backend(llvm)
    @inline(always)
    public static func +(lhs: UInt8, rhs: UInt8) -> UInt8 native(iadd)

    @backend(llvm)
    @inline(always)
    public static func -(lhs: UInt8, rhs: UInt8) -> UInt8 native(isub)

    @backend(llvm)
    @inline(always)
    public static func *(lhs: UInt8, rhs: UInt8) -> UInt8 native(imul)

    @backend(llvm)
    @inline(always)
    public static func /(lhs: UInt8, rhs: UInt8) -> Double native(uidiv)

    @backend(llvm)
    @inline(always)
    public static func \(lhs: UInt8, rhs: UInt8) -> UInt8 native(udiv)

    @backend(llvm)
    @inline(always)
    public static func %(lhs: UInt8, rhs: UInt8) -> UInt8 native(uirem)

    @backend(llvm)
    @inline(always)
    public static func &(lhs: UInt8, rhs: UInt8) -> UInt8 native(and);

    @backend(llvm)
    @inline(always)
    public static func |(lhs: UInt8, rhs: UInt8) -> UInt8 native(or);

    @backend(llvm)
    @inline(always)
    public static func ^(lhs: UInt8, rhs: UInt8) -> UInt8 native(xor);

    @backend(llvm)
    @inline(always)
    public static func ==(lhs: UInt8, rhs: UInt8) -> Bool native(ieq)

    @backend(llvm)
    @inline(always)
    public static func !=(lhs: UInt8, rhs: UInt8) -> Bool native(ineq)

    @backend(llvm)
    @inline(always)
    public static func >=(lhs: UInt8, rhs: UInt8) -> Bool native(uigte)

    @backend(llvm)
    @inline(always)
    public static func <=(lhs: UInt8, rhs: UInt8) -> Bool native(uilte)

    @backend(llvm)
    @inline(always)
    public static func >(lhs: UInt8, rhs: UInt8) -> Bool native(uigt)

    @backend(llvm)
    @inline(always)
    public static func <(lhs: UInt8, rhs: UInt8) -> Bool native(uilt)

    @backend(llvm)
    @inline(always)
    public static func <<(lhs: UInt8, rhs: UInt8) -> UInt8 native(shl);

    @backend(llvm)
    @inline(always)
    public static func >>(lhs: UInt8, rhs: UInt8) -> UInt8 native(ashr);

    @backend(llvm)
    @inline(always)
    public static func >>>(lhs: UInt8, rhs: UInt8) -> UInt8 native(lshr);

    @backend(llvm)
    @inline(always)
    public static func ~(expression: UInt8) -> UInt8 native(inot)

    @backend(llvm)
    @inline(always)
    public static func -(expression: UInt8) -> UInt8 native(ineg)

    func toString(base: Int = 10) -> String {
        assert(base > 0, "UInt8#toString(base:): base must be positive")
        assert(base <= 26, "UInt8#toString(base:): base must be at most 26")

        let length: UInt64 = UInt64::floor(log(Float::self)/log(Float::base)) + 1

        const stringBytes = Pointer<UInt8>.alloc(count: length + 1)
        let stringPos = stringBytes.offset(by: Int64::length - 1)

        let n: UInt8 = self

        do {
            let digit = n % UInt8::base

            if digit < 0x0A {
                // 48 is char code for '0'
                stringPos.store(value: 48 + UInt8::digit)
            } else {
                // 65 is char code for 'A'
                stringPos.store(value: 65 + UInt8::digit - 0x0A)
            }

            stringPos = stringPos.offset(by: -1)
        } while (n \= UInt8::base) != 0

        // Store suffix null byte
        stringBytes.offset(by: Int64::length).store(value: 0)

        return String(value: stringBytes, byteLength: UInt::length)
    }

    /// Generates random number in range [from, to)
    public static func random(from start: UInt8, to end: UInt8) -> UInt8 {
        assert(end > start, "Random end must be greater than start")
        return (UInt8::getRandomInt()) % (end - start) + start
    }
}
