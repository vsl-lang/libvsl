// Represents a 32-bit signed integer. This is the default integer type on
// 32-bit systems, additionally this is the int type used when interacting with
// C APIs.
@primitive(Integer, _precType) @mock(i32) public class Int32 {

    @backend(llvm)
    @inline(always)
    public static func +(lhs: Int32, rhs: Int32) -> Int32 native(iadd)

    @backend(llvm)
    @inline(always)
    public static func -(lhs: Int32, rhs: Int32) -> Int32 native(isub)

    @backend(llvm)
    @inline(always)
    public static func *(lhs: Int32, rhs: Int32) -> Int32 native(imul)

    @backend(llvm)
    @inline(always)
    public static func /(lhs: Int32, rhs: Int32) -> Double native(idiv)

    @backend(llvm)
    @inline(always)
    public static func \(lhs: Int32, rhs: Int32) -> Int32 native(sdiv)

    @backend(llvm)
    @inline(always)
    public static func %(lhs: Int32, rhs: Int32) -> Int32 native(irem)

    @backend(llvm)
    @inline(always)
    public static func ==(lhs: Int32, rhs: Int32) -> Bool native(ieq)

    @backend(llvm)
    @inline(always)
    public static func !=(lhs: Int32, rhs: Int32) -> Bool native(ineq)

    @backend(llvm)
    @inline(always)
    public static func >=(lhs: Int32, rhs: Int32) -> Bool native(igte)

    @backend(llvm)
    @inline(always)
    public static func <=(lhs: Int32, rhs: Int32) -> Bool native(ilte)

    @backend(llvm)
    @inline(always)
    public static func &(lhs: Int32, rhs: Int32) -> Int32 native(and);

    @backend(llvm)
    @inline(always)
    public static func |(lhs: Int32, rhs: Int32) -> Int32 native(or);

    @backend(llvm)
    @inline(always)
    public static func ^(lhs: Int32, rhs: Int32) -> Int32 native(xor);

    @backend(llvm)
    @inline(always)
    public static func >(lhs: Int32, rhs: Int32) -> Bool native(igt)

    @backend(llvm)
    @inline(always)
    public static func <(lhs: Int32, rhs: Int32) -> Bool native(ilt)

    @backend(llvm)
    @inline(always)
    public static func <<(lhs: Int32, rhs: Int32) -> Int32 native(shl);

    @backend(llvm)
    @inline(always)
    public static func >>(lhs: Int32, rhs: Int32) -> Int32 native(ashr);

    @backend(llvm)
    @inline(always)
    public static func >>>(lhs: Int32, rhs: Int32) -> Int32 native(lshr);

    @backend(llvm)
    @inline(always)
    public static func ~(expression: Int32) -> Int32 native(inot)

    @backend(llvm)
    @inline(always)
    public static func -(expression: Int32) -> Int32 native(ineg)

    /// Converts to a string
    func toString(base: Int = 10) -> String {
        assert(base > 0, "Int32#toString(base:): base must be positive")
        assert(base <= 26, "Int32#toString(base:): base must be at most 26")

        const isNegative = self < 0
        const absoluteValue = UInt32::abs(self)
        const length = UInt64::floor(log(Double::absoluteValue)/log(Double::base)) + 1 + UInt64::isNegative

        const stringBytes = Pointer<UInt8>.alloc(count: length + 1)
        let stringPos = stringBytes.offset(by: Int64::length - 1)

        // This branch
        let n = absoluteValue

        do {
            let digit = n % UInt32::base

            if digit < 0x0A {
                // 48 is char code for '0'
                stringPos.store(value: 48 + UInt8::digit)
            } else {
                // 65 is char code for 'A'
                stringPos.store(value: 65 + UInt8::digit - 0x0A)
            }

            stringPos = stringPos.offset(by: -1)
        } while (n \= UInt32::base) != 0

        // If number was negative all along add negative
        if isNegative {
            // 45 is char code for '-'
            stringPos.store(value: 45)
        }

        // Store suffix null byte
        stringBytes.offset(by: Int64::length).store(value: 0)

        return String(value: stringBytes, byteLength: UInt::length)
    }

}

public typealias Int = Int32
