// A boolean represents a true or false value. This is the default 'boolean
// provider' in VSL. This means that you can use this in if statements and other
// control flow statements to build logic and complex programs.
//
// A VSL boolean will only take one physical bit however depending on the target
// it may be 8 or 4-bit aligned. For this reason, you may choose to use a packed
// struct to store a series of booleans. Booleans are not directly convertable
// to integers. You can however convert a boolean to an integer using
// `Int(true)` or `Int(false)`.
//
// Other languages offer integers and strings to also be considered a falsey
// value. VSL, instead, only allows a `false` boolean to be considered false.
// This has the benefit that you must explicitly specify what you want to check
// and reduces confusion for someone reading code.
@primitive(Boolean)
@booleanProvider
@mock(i1) public class Bool {
    @backend(llvm)
    @inline
    public static func ==(lhs: Bool, rhs: Bool) -> Bool native(ieq)
}
