@primitive(FloatingPoint)
@mock(float)
public class Float {

    private init() {}

    @backend(llvm)
    @inline(always)
    public static func +(lhs: Float, rhs: Float) -> Float native(fadd)

    @backend(llvm)
    @inline(always)
    public static func -(lhs: Float, rhs: Float) -> Float native(fsub)

    @backend(llvm)
    @inline(always)
    public static func *(lhs: Float, rhs: Float) -> Float native(fmul)

    @backend(llvm)
    @inline(always)
    public static func /(lhs: Float, rhs: Float) -> Float native(fdiv)

    @backend(llvm)
    @inline(always)
    public static func %(lhs: Float, rhs: Float) -> Float native(frem)

    @backend(llvm)
    @inline(always)
    public static func ==(lhs: Float, rhs: Float) -> Bool native(feq)

    @backend(llvm)
    @inline(always)
    public static func !=(lhs: Float, rhs: Float) -> Bool native(fneq)

    @backend(llvm)
    @inline(always)
    public static func <(lhs: Float, rhs: Float) -> Bool native(flt)

    @backend(llvm)
    @inline(always)
    public static func >(lhs: Float, rhs: Float) -> Bool native(fgt)

    @backend(llvm)
    @inline(always)
    public static func <=(lhs: Float, rhs: Float) -> Bool native(flte)

    @backend(llvm)
    @inline(always)
    public static func >=(lhs: Float, rhs: Float) -> Bool native(fgte)

    @backend(llvm)
    @inline(always)
    public static func -(expression: Float) -> Float native(fneg)



    @inline(always)
    private static func isNaN(a: Float, b: Float) -> Bool native(isnan)

    // Converts the float to a UInt32 with the bits of the float preserved
    // exactly. To perform a FP cast use the bitcast operator.
    @inline
    public func reinterpretAsInt() -> UInt32 {
        const ptr = Pointer<Float>.alloc(count: 1)
        ptr.store(value: self)
        const value = (Pointer<UInt32>::ptr).dereference()
        ptr.free()
        return value
    }

    /// Specifies if the current float is a NaN value
    public let isNaN: Bool {
        return Float.isNaN(a: self, b: self)
    }

    /// Specifies if the current float is positive _or negative infinity_.
    public let isInfinity: Bool {
        return self == Float.infinity || self == Float.negativeInfinity
    }

    /// Returns the value for a 'NaN' value (specifically a QNaN). You cannot
    /// compare to this, instead use 'isNaN' to check for a NaN value.
    public static const NaN: Float = 0.0 / 0.0

    /// Returns the value for positive infinity
    public static const infinity: Float = 1.0 / 0.0

    /// Returns the value for negative infinity
    public static const negativeInfinity: Float = -1.0 / 0.0

}
