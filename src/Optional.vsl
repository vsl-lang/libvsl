@optionalType
@dynamic(false)
public struct Optional<Type> {
    private const hasValue: Bool

    /// This is unsafe to access/dereference if hasValue is false
    private const value: Type

    /// Creates an optional with a value. Use the syntax to create an optional
    /// rather than the constructor as this is an implementation detail.
    init(withValue value: Type) {
        self.hasValue = true
        self.value = value
    }
}
