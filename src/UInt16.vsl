// Represents a 16-bit unsigned integer.
@primitive(Integer) @mock(ui16) public class UInt16 {

    @backend(llvm)
    @inline(always)
    public static func +(lhs: UInt16, rhs: UInt16) -> UInt16 native(iadd)

    @backend(llvm)
    @inline(always)
    public static func -(lhs: UInt16, rhs: UInt16) -> UInt16 native(isub)

    @backend(llvm)
    @inline(always)
    public static func *(lhs: UInt16, rhs: UInt16) -> UInt16 native(imul)

    @backend(llvm)
    @inline(always)
    public static func /(lhs: UInt16, rhs: UInt16) -> Double native(uidiv)

    @backend(llvm)
    @inline(always)
    public static func \(lhs: UInt16, rhs: UInt16) -> UInt16 native(udiv)

    @backend(llvm)
    @inline(always)
    public static func %(lhs: UInt16, rhs: UInt16) -> UInt16 native(uirem)

    @backend(llvm)
    @inline(always)
    public static func &(lhs: UInt16, rhs: UInt16) -> UInt16 native(and);

    @backend(llvm)
    @inline(always)
    public static func |(lhs: UInt16, rhs: UInt16) -> UInt16 native(or);

    @backend(llvm)
    @inline(always)
    public static func ^(lhs: UInt16, rhs: UInt16) -> UInt16 native(xor);

    @backend(llvm)
    @inline(always)
    public static func ==(lhs: UInt16, rhs: UInt16) -> Bool native(ieq)

    @backend(llvm)
    @inline(always)
    public static func !=(lhs: UInt16, rhs: UInt16) -> Bool native(ineq)

    @backend(llvm)
    @inline(always)
    public static func >=(lhs: UInt16, rhs: UInt16) -> Bool native(uigte)

    @backend(llvm)
    @inline(always)
    public static func <=(lhs: UInt16, rhs: UInt16) -> Bool native(uilte)

    @backend(llvm)
    @inline(always)
    public static func >(lhs: UInt16, rhs: UInt16) -> Bool native(uigt)

    @backend(llvm)
    @inline(always)
    public static func <(lhs: UInt16, rhs: UInt16) -> Bool native(uilt)

    @backend(llvm)
    @inline(always)
    public static func <<(lhs: UInt16, rhs: UInt16) -> UInt16 native(shl);

    @backend(llvm)
    @inline(always)
    public static func >>(lhs: UInt16, rhs: UInt16) -> UInt16 native(ashr);

    @backend(llvm)
    @inline(always)
    public static func >>>(lhs: UInt16, rhs: UInt16) -> UInt16 native(lshr);

    @backend(llvm)
    @inline(always)
    public static func ~(expression: UInt16) -> UInt16 native(inot)

    @backend(llvm)
    @inline(always)
    public static func -(expression: UInt16) -> UInt16 native(ineg)

    /// Converts to string
    func toString(base: Int = 10) -> String {
        assert(base > 0, "UInt16#toString(base:): base must be positive")
        assert(base <= 26, "UInt16#toString(base:): base must be at most 26")

        let length: UInt64 = UInt64::floor(log(Float::self)/log(Float::base)) + 1

        const stringBytes = Pointer<UInt8>.alloc(count: length + 1)
        let stringPos = stringBytes.offset(by: Int64::length - 1)

        let n: UInt16 = self

        do {
            let digit = n % UInt16::base

            if digit < 0x0A {
                // 48 is char code for '0'
                stringPos.store(value: 48 + UInt8::digit)
            } else {
                // 65 is char code for 'A'
                stringPos.store(value: 65 + UInt8::digit - 0x0A)
            }

            stringPos = stringPos.offset(by: -1)
        } while (n \= UInt16::base) != 0

        // Store suffix null byte
        stringBytes.offset(by: Int64::length).store(value: 0)

        return String(value: stringBytes, byteLength: UInt::length)
    }

    /// Generates random number in range [from, to)
    public static func random(from start: UInt16, to end: UInt16) -> UInt16 {
        assert(end > start, "Random end must be greater than start")
        return (UInt16::getRandomInt()) % (end - start) + start
    }

    /// Smallest possible
    public static const minValue: UInt16 = 0

    /// Largest possible
    public static const maxValue: UInt16 = ~0
}
