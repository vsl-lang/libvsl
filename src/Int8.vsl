// Represents an 8-bit signed integer. While for most purposes you can represent
// the same data with `Int8` and `UInt8`, you will encounter trouble when
// performing comparisons. Other operations are the same as VSL uses thetwo
// 's-complement representation of signed integers.
//
// A defined integers in VSL cannot be implicitly cast to another due to the
// potential unsafe loss of precision.
@primitive(Integer) @mock(i8) public class Int8 {

    @backend(llvm)
    @inline(always)
    public static func +(lhs: Int8, rhs: Int8) -> Int8 native(iadd)

    @backend(llvm)
    @inline(always)
    public static func -(lhs: Int8, rhs: Int8) -> Int8 native(isub)

    @backend(llvm)
    @inline(always)
    public static func *(lhs: Int8, rhs: Int8) -> Int8 native(imul)

    @backend(llvm)
    @inline(always)
    public static func /(lhs: Int8, rhs: Int8) -> Double native(idiv)

    @backend(llvm)
    @inline(always)
    public static func \(lhs: Int8, rhs: Int8) -> Int8 native(sdiv)

    @backend(llvm)
    @inline(always)
    public static func %(lhs: Int8, rhs: Int8) -> Int8 native(irem)

    @backend(llvm)
    @inline(always)
    public static func ==(lhs: Int8, rhs: Int8) -> Bool native(ieq)

    @backend(llvm)
    @inline(always)
    public static func !=(lhs: Int8, rhs: Int8) -> Bool native(ineq)

    @backend(llvm)
    @inline(always)
    public static func >=(lhs: Int8, rhs: Int8) -> Bool native(igte)

    @backend(llvm)
    @inline(always)
    public static func <=(lhs: Int8, rhs: Int8) -> Bool native(ilte)

    @backend(llvm)
    @inline(always)
    public static func >(lhs: Int8, rhs: Int8) -> Bool native(igt)

    @backend(llvm)
    @inline(always)
    public static func <(lhs: Int8, rhs: Int8) -> Bool native(ilt)

    @backend(llvm)
    @inline(always)
    public static func &(lhs: Int8, rhs: Int8) -> Int8 native(and);

    @backend(llvm)
    @inline(always)
    public static func |(lhs: Int8, rhs: Int8) -> Int8 native(or);

    @backend(llvm)
    @inline(always)
    public static func ^(lhs: Int8, rhs: Int8) -> Int8 native(xor);

    @backend(llvm)
    @inline(always)
    public static func <<(lhs: Int8, rhs: Int8) -> Int8 native(shl);

    @backend(llvm)
    @inline(always)
    public static func >>(lhs: Int8, rhs: Int8) -> Int8 native(ashr);

    @backend(llvm)
    @inline(always)
    public static func >>>(lhs: Int8, rhs: Int8) -> Int8 native(lshr);

    @backend(llvm)
    @inline(always)
    public static func ~(expression: Int8) -> Int8 native(inot)

    @backend(llvm)
    @inline(always)
    public static func -(expression: Int8) -> Int8 native(ineg)

}
