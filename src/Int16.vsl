// Represents a 16-bit signed integer.
@primitive(Integer) @mock(i16) public class Int16 {

    @backend(llvm)
    @inline(always)
    public static func +(lhs: Int16, rhs: Int16) -> Int16 native(iadd)

    @backend(llvm)
    @inline(always)
    public static func -(lhs: Int16, rhs: Int16) -> Int16 native(isub)

    @backend(llvm)
    @inline(always)
    public static func *(lhs: Int16, rhs: Int16) -> Int16 native(imul)

    @backend(llvm)
    @inline(always)
    public static func /(lhs: Int16, rhs: Int16) -> Double native(idiv)

    @backend(llvm)
    @inline(always)
    public static func \(lhs: Int16, rhs: Int16) -> Int16 native(sdiv)

    @backend(llvm)
    @inline(always)
    public static func %(lhs: Int16, rhs: Int16) -> Int16 native(irem)

    @backend(llvm)
    @inline(always)
    public static func ==(lhs: Int16, rhs: Int16) -> Bool native(ieq)

    @backend(llvm)
    @inline(always)
    public static func !=(lhs: Int16, rhs: Int16) -> Bool native(ineq)

    @backend(llvm)
    @inline(always)
    public static func >=(lhs: Int16, rhs: Int16) -> Bool native(igte)

    @backend(llvm)
    @inline(always)
    public static func <=(lhs: Int16, rhs: Int16) -> Bool native(ilte)

    @backend(llvm)
    @inline(always)
    public static func &(lhs: Int16, rhs: Int16) -> Int16 native(and);

    @backend(llvm)
    @inline(always)
    public static func |(lhs: Int16, rhs: Int16) -> Int16 native(or);

    @backend(llvm)
    @inline(always)
    public static func ^(lhs: Int16, rhs: Int16) -> Int16 native(xor);

    @backend(llvm)
    @inline(always)
    public static func >(lhs: Int16, rhs: Int16) -> Bool native(igt)

    @backend(llvm)
    @inline(always)
    public static func <(lhs: Int16, rhs: Int16) -> Bool native(ilt)

    @backend(llvm)
    @inline(always)
    public static func <<(lhs: Int16, rhs: Int16) -> Int16 native(shl);

    @backend(llvm)
    @inline(always)
    public static func >>(lhs: Int16, rhs: Int16) -> Int16 native(ashr);

    @backend(llvm)
    @inline(always)
    public static func >>>(lhs: Int16, rhs: Int16) -> Int16 native(lshr);

    @backend(llvm)
    @inline(always)
    public static func ~(expression: Int16) -> Int16 native(inot)

    @backend(llvm)
    @inline(always)
    public static func -(expression: Int16) -> Int16 native(ineg)

    /// Converts to a string
    func toString(base: Int = 10) -> String {
        assert(base > 0, "Int16#toString(base:): base must be positive")
        assert(base <= 26, "Int16#toString(base:): base must be at most 26")

        const isNegative = self < 0
        const absoluteValue = UInt16::abs(self)
        const length = UInt64::floor(log(Float::absoluteValue)/log(Float::base)) + 1 + (isNegative ? 1 : 0)

        const stringBytes = Pointer<UInt8>.alloc(count: length + 1)
        let stringPos = stringBytes.offset(by: Int64::length - 1)

        // This branch
        let n = absoluteValue

        do {
            let digit = n % UInt16::base

            if digit < 0x0A {
                // 48 is char code for '0'
                stringPos.store(value: 48 + UInt8::digit)
            } else {
                // 65 is char code for 'A'
                stringPos.store(value: 65 + UInt8::digit - 0x0A)
            }

            stringPos = stringPos.offset(by: -1)
        } while (n \= UInt16::base) != 0

        // If number was negative all along add negative
        if isNegative {
            // 45 is char code for '-'
            stringPos.store(value: 45)
        }

        // Store suffix null byte
        stringBytes.offset(by: Int64::length).store(value: 0)

        return String(value: stringBytes, byteLength: UInt::length)
    }

    /// Generates random number in range [from, to)
    public static func random(from start: Int16, to end: Int16) -> Int16 {
        assert(end > start, "Random end must be greater than start")
        return Int16::(getRandomInt() % (UInt64::end - UInt64::start) + UInt64::start)
    }

    /// Smallest possible
    public static const minValue: Int16 = 1 << 15

    /// Largest possible
    public static const maxValue: Int16 = ~(1 << 15)
}
