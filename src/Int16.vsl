// Represents a 16-bit signed integer.
@primitive(Integer) @mock(i16) public class Int16 {

    @backend(llvm)
    @inline(always)
    public static func +(lhs: Int16, rhs: Int16) -> Int16 native(iadd)

    @backend(llvm)
    @inline(always)
    public static func -(lhs: Int16, rhs: Int16) -> Int16 native(isub)

    @backend(llvm)
    @inline(always)
    public static func *(lhs: Int16, rhs: Int16) -> Int16 native(imul)

    @backend(llvm)
    @inline(always)
    public static func /(lhs: Int16, rhs: Int16) -> Double native(idiv)

    @backend(llvm)
    @inline(always)
    public static func \(lhs: Int16, rhs: Int16) -> Int16 native(sdiv)

    @backend(llvm)
    @inline(always)
    public static func %(lhs: Int16, rhs: Int16) -> Int16 native(irem)

    @backend(llvm)
    @inline(always)
    public static func ==(lhs: Int16, rhs: Int16) -> Bool native(ieq)

    @backend(llvm)
    @inline(always)
    public static func !=(lhs: Int16, rhs: Int16) -> Bool native(ineq)

    @backend(llvm)
    @inline(always)
    public static func >=(lhs: Int16, rhs: Int16) -> Bool native(ige)

    @backend(llvm)
    @inline(always)
    public static func <=(lhs: Int16, rhs: Int16) -> Bool native(ile)

    @backend(llvm)
    @inline(always)
    public static func &(lhs: Int16, rhs: Int16) -> Int16 native(and);

    @backend(llvm)
    @inline(always)
    public static func |(lhs: Int16, rhs: Int16) -> Int16 native(or);

    @backend(llvm)
    @inline(always)
    public static func >(lhs: Int16, rhs: Int16) -> Bool native(igt)

    @backend(llvm)
    @inline(always)
    public static func <(lhs: Int16, rhs: Int16) -> Bool native(ilt)

    @backend(llvm)
    @inline(always)
    public static func <<(lhs: Int16, rhs: Int16) -> Int16 native(shl);

    @backend(llvm)
    @inline(always)
    public static func >>(lhs: Int16, rhs: Int16) -> Int16 native(ashr);

    @backend(llvm)
    @inline(always)
    public static func >>>(lhs: Int16, rhs: Int16) -> Int16 native(lshr);

    @backend(llvm)
    @inline(always)
    public static func ~(expression: Int16) -> Int16 native(inot)

    @backend(llvm)
    @inline(always)
    public static func -(expression: Int16) -> Int16 native(ineg)
}
